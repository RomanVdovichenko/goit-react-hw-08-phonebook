{"version":3,"file":"static/js/431.09ba8e86.chunk.js","mappings":"gOACA,EAA0B,yBAA1B,EAA0D,sBAA1D,EAAyF,wB,SCI5EA,EAAU,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACjBC,GAAWC,EAAAA,EAAAA,MAGjB,OACE,iBAAKC,UAAWC,EAAhB,WACE,cAAGD,UAAWC,EAAd,SAAyBJ,EAAKK,QAC9B,cAAGF,UAAWC,EAAd,SAAyBJ,EAAKM,UAC9B,mBAAQC,KAAK,SAASJ,UAAWC,EAAYI,QAN5B,kBAAMP,GAASQ,EAAAA,EAAAA,IAAcT,EAAKU,IAAlC,EAMjB,SAAoE,aAKzE,E,UClBYC,EAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAV,ECCjC,EAAuB,0BCKVC,EAAc,WACzB,OAAiCC,EAAAA,EAAAA,KAAzBC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,QACfC,GAAgBC,EAAAA,EAAAA,IAAYR,GAS5BS,EAPsB,WAC1B,IAAMC,EAAoBH,EAAcI,cACxC,OAAON,EAAYH,QAAO,qBAAGR,KACtBiB,cAAcC,SAASF,EADJ,GAG3B,CAEsBG,GAEvB,OACA,gCAC8B,KAAb,OAAdJ,QAAc,IAAdA,OAAA,EAAAA,EAAgBK,UAAiBR,IAAW,wBAAG,uBAAG,kBAClDA,GAAU,uBAAG,gCACZ,eAAId,UAAWC,EAAf,gBACCgB,QADD,IACCA,OADD,EACCA,EAAgBM,KAAI,SAACC,GAAD,OACnB,yBACE,SAAC5B,EAAD,CAASC,KAAM2B,KADRA,EAAKjB,GADK,QAQ1B,E,oBC9BYkB,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,GAGd,E,UCXD,EAAyB,uBCIZC,EAAS,WACpB,IAAMjC,GAAWC,EAAAA,EAAAA,MAKjB,OACE,0BACE,4BACE,kBACEK,KAAK,OACLJ,UAAWC,EACX+B,SAVmB,SAAAC,GACzBnC,GAASoC,EAAAA,EAAAA,GAAaD,EAAIE,cAAcC,OACzC,EASOC,YAAY,6BAKrB,ECdc,SAASC,IACtB,IAAMxC,GAAWC,EAAAA,EAAAA,MACXwC,GAAYvB,EAAAA,EAAAA,IAAYwB,EAAAA,IAM9B,OAJAC,EAAAA,EAAAA,YAAU,WACR3C,GAAS4C,EAAAA,EAAAA,MACV,GAAE,CAAC5C,KAGF,iCACE,SAAC,KAAD,WACE,2BAAO,qBAET,yBAAMyC,IAAa,SAACd,EAAD,OACnB,SAACM,EAAD,KACA,SAACpB,EAAD,MAGL,C","sources":["webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.js","redux/filter/selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","components/Loader.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Contact_wrapper__K-zLN\",\"text\":\"Contact_text__Wq-3f\",\"button\":\"Contact_button__F+kJb\"};","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport PropTypes from 'prop-types';\nimport css from './Contact.module.css';\n\nexport const Contact = ({text}) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(text.id));\n  \n  return (\n    <div className={css.wrapper}>\n      <p className={css.text}>{text.name}</p>\n      <p className={css.text}>{text.number}</p>\n      <button type=\"button\" className={css.button} onClick={handleDelete}>\n        Delete\n      </button>\n    </div>\n  );\n};\n\nContact.propTypes = {\n  text: PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string,\n  })\n}","export const selectFilter = state => state.filter","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import { useSelector } from 'react-redux';\nimport { Contact } from '../Contact/Contact';\nimport { useContacts } from 'hooks';\nimport { selectFilter } from 'redux/filter/selectors';\nimport css from './ContactList.module.css';\n\nexport const ContactList = () => {\n  const { allContacts, isError } = useContacts();\n  const filterContact = useSelector(selectFilter)\n  \n    const getVisibleContact = () => {\n    const normalizedContact = filterContact.toLowerCase();\n    return allContacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedContact)\n    );\n  };\n\n  const visibleContact = getVisibleContact();\n\n  return (\n  <>\n    {visibleContact?.length === 0 && !isError && <p><b>No contacts</b></p>}\n    {isError ? <p>Sorry, there was an error.</p> :\n      <ul className={css.list}>\n      {visibleContact?.map((item) => (\n        <li key={item.id}>\n          <Contact text={item} />\n        </li>\n      ))}\n      </ul>}\n    </>\n  );\n};","import { RotatingLines } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <RotatingLines\n      strokeColor=\"grey\"\n      strokeWidth=\"5\"\n      animationDuration=\"0.75\"\n      width=\"50\"\n      visible={true}\n    />\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filter/slice';\nimport css from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const handleChangeFilter = evt => {\n    dispatch(changeFilter(evt.currentTarget.value));\n  };\n\n  return (\n    <div>\n      <label>\n        <input\n          type=\"text\"\n          className={css.filter}\n          onChange={handleChangeFilter}\n          placeholder='Find contacts by name'\n        />\n      </label>\n    </div>\n  );\n};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet-async';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { Loader } from 'components/Loader';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div>{isLoading && <Loader />}</div>\n      <Filter/>\n      <ContactList />\n    </>\n  );\n}"],"names":["Contact","text","dispatch","useDispatch","className","css","name","number","type","onClick","deleteContact","id","selectFilter","state","filter","ContactList","useContacts","allContacts","isError","filterContact","useSelector","visibleContact","normalizedContact","toLowerCase","includes","getVisibleContact","length","map","item","Loader","strokeColor","strokeWidth","animationDuration","width","visible","Filter","onChange","evt","changeFilter","currentTarget","value","placeholder","Contacts","isLoading","selectLoading","useEffect","fetchContacts"],"sourceRoot":""}